{"ast":null,"code":"var _jsxFileName = \"C:\\\\SDP_team_project\\\\airline-reservation-system_sdp\\\\src\\\\pages\\\\registeredCustomer\\\\pages\\\\weather\\\\components\\\\Clock.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.tick = timezone => {\n      this.setState({\n        date: this.getTime(timezone)\n      });\n    };\n\n    this.getTime = offset => {\n      let date = new Date();\n      let localTime = date.getTime();\n      let localOffset = date.getTimezoneOffset() * 60000; // obtain UTC time in msec\n\n      let utc = localTime + localOffset; // create new Date object for different city\n      // using supplied offset\n\n      let newDate = new Date(utc + 1000 * offset);\n\n      if (newDate.getHours() > 18 || newDate.getHours() >= 0 && newDate.getHours() <= 4) {\n        this.props.day_Night('n');\n      } else {\n        this.props.day_Night('d');\n      }\n\n      return newDate;\n    };\n\n    this.state = {\n      date: new Date()\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(this.props.data.timezone), 1000);\n  }\n\n  render() {\n    let hours = this.state.date.getHours();\n    let minutes = this.state.date.getMinutes();\n    let seconds = this.state.date.getSeconds();\n\n    if (minutes < 10) {\n      minutes = '0' + minutes;\n    }\n\n    if (seconds < 10) {\n      seconds = '0' + seconds;\n    }\n\n    let ampm = \"am\";\n\n    if (hours > 12) {\n      hours = hours - 12;\n      ampm = 'pm';\n    } else if (hours === 0) {\n      hours = 12;\n      ampm = 'am';\n    } else if (hours === 12) {\n      ampm = 'pm';\n    }\n\n    if (this.props.data.main) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"clock\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [hours, \":\", minutes, \":\", seconds, \" \", ampm]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this);\n    } else {\n      return null;\n    }\n  }\n\n}\n\nexport default Clock;","map":{"version":3,"sources":["C:/SDP_team_project/airline-reservation-system_sdp/src/pages/registeredCustomer/pages/weather/components/Clock.js"],"names":["React","Clock","Component","constructor","props","tick","timezone","setState","date","getTime","offset","Date","localTime","localOffset","getTimezoneOffset","utc","newDate","getHours","day_Night","state","componentDidMount","timerID","setInterval","data","render","hours","minutes","getMinutes","seconds","getSeconds","ampm","main"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAoC;AAElCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAOnBC,IAPmB,GAOXC,QAAD,IAAc;AACnB,WAAKC,QAAL,CAAc;AACZC,QAAAA,IAAI,EAAE,KAAKC,OAAL,CAAaH,QAAb;AADM,OAAd;AAGD,KAXkB;;AAAA,SAanBG,OAbmB,GAaRC,MAAD,IAAY;AAEpB,UAAIF,IAAI,GAAG,IAAIG,IAAJ,EAAX;AACA,UAAIC,SAAS,GAAGJ,IAAI,CAACC,OAAL,EAAhB;AACA,UAAII,WAAW,GAAGL,IAAI,CAACM,iBAAL,KAA2B,KAA7C,CAJoB,CAMpB;;AACA,UAAIC,GAAG,GAAGH,SAAS,GAAGC,WAAtB,CAPoB,CASpB;AACA;;AACA,UAAIG,OAAO,GAAG,IAAIL,IAAJ,CAASI,GAAG,GAAI,OAAOL,MAAvB,CAAd;;AAEA,UAAIM,OAAO,CAACC,QAAR,KAAqB,EAArB,IAA4BD,OAAO,CAACC,QAAR,MAAsB,CAAtB,IAA2BD,OAAO,CAACC,QAAR,MAAsB,CAAjF,EAAqF;AACnF,aAAKb,KAAL,CAAWc,SAAX,CAAqB,GAArB;AACD,OAFD,MAEO;AACL,aAAKd,KAAL,CAAWc,SAAX,CAAqB,GAArB;AACD;;AAED,aAAOF,OAAP;AACD,KAjCkB;;AAEjB,SAAKG,KAAL,GAAa;AACXX,MAAAA,IAAI,EAAE,IAAIG,IAAJ;AADK,KAAb;AAGD;;AA8BDS,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,OAAL,GAAeC,WAAW,CACxB,MAAM,KAAKjB,IAAL,CAAU,KAAKD,KAAL,CAAWmB,IAAX,CAAgBjB,QAA1B,CADkB,EAExB,IAFwB,CAA1B;AAID;;AAEDkB,EAAAA,MAAM,GAAG;AACP,QAAIC,KAAK,GAAG,KAAKN,KAAL,CAAWX,IAAX,CAAgBS,QAAhB,EAAZ;AACA,QAAIS,OAAO,GAAG,KAAKP,KAAL,CAAWX,IAAX,CAAgBmB,UAAhB,EAAd;AACA,QAAIC,OAAO,GAAG,KAAKT,KAAL,CAAWX,IAAX,CAAgBqB,UAAhB,EAAd;;AAEA,QAAIH,OAAO,GAAG,EAAd,EAAkB;AAChBA,MAAAA,OAAO,GAAG,MAAMA,OAAhB;AACD;;AAED,QAAIE,OAAO,GAAG,EAAd,EAAkB;AAChBA,MAAAA,OAAO,GAAG,MAAMA,OAAhB;AACD;;AAED,QAAIE,IAAI,GAAG,IAAX;;AAEA,QAAIL,KAAK,GAAG,EAAZ,EAAgB;AACdA,MAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;AACAK,MAAAA,IAAI,GAAG,IAAP;AACD,KAHD,MAGO,IAAIL,KAAK,KAAK,CAAd,EAAiB;AACtBA,MAAAA,KAAK,GAAG,EAAR;AACAK,MAAAA,IAAI,GAAG,IAAP;AACD,KAHM,MAGA,IAAIL,KAAK,KAAK,EAAd,EAAkB;AACvBK,MAAAA,IAAI,GAAG,IAAP;AACD;;AAED,QAAI,KAAK1B,KAAL,CAAWmB,IAAX,CAAgBQ,IAApB,EAA0B;AAExB,0BACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BACE;AAAA,qBAAKN,KAAL,OAAaC,OAAb,OAAuBE,OAAvB,OAAiCE,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAKD,KAPD,MAOO;AACL,aAAO,IAAP;AACD;AACF;;AA/EiC;;AAkFpC,eAAe7B,KAAf","sourcesContent":["import React from 'react';\r\n\r\nclass Clock extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      date: new Date(),\r\n    };\r\n  }\r\n\r\n  tick = (timezone) => {\r\n    this.setState({\r\n      date: this.getTime(timezone),\r\n    });\r\n  }\r\n\r\n  getTime = (offset) => {\r\n\r\n    let date = new Date();\r\n    let localTime = date.getTime();\r\n    let localOffset = date.getTimezoneOffset() * 60000;\r\n\r\n    // obtain UTC time in msec\r\n    let utc = localTime + localOffset;\r\n\r\n    // create new Date object for different city\r\n    // using supplied offset\r\n    let newDate = new Date(utc + (1000 * offset));\r\n\r\n    if (newDate.getHours() > 18 || (newDate.getHours() >= 0 && newDate.getHours() <= 4)) {\r\n      this.props.day_Night('n');\r\n    } else {\r\n      this.props.day_Night('d');\r\n    }\r\n\r\n    return newDate;\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(\r\n      () => this.tick(this.props.data.timezone),\r\n      1000\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let hours = this.state.date.getHours();\r\n    let minutes = this.state.date.getMinutes();\r\n    let seconds = this.state.date.getSeconds();\r\n\r\n    if (minutes < 10) {\r\n      minutes = '0' + minutes;\r\n    }\r\n\r\n    if (seconds < 10) {\r\n      seconds = '0' + seconds;\r\n    }\r\n\r\n    let ampm = \"am\";\r\n\r\n    if (hours > 12) {\r\n      hours = hours - 12;\r\n      ampm = 'pm';\r\n    } else if (hours === 0) {\r\n      hours = 12;\r\n      ampm = 'am'\r\n    } else if (hours === 12) {\r\n      ampm = 'pm'\r\n    }\r\n\r\n    if (this.props.data.main) {\r\n\r\n      return (\r\n        <div className=\"clock\">\r\n          <h2>{hours}:{minutes}:{seconds} {ampm}</h2>\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Clock;"]},"metadata":{},"sourceType":"module"}